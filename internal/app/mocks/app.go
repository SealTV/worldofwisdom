// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockClienter) Read(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClienterMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClienter)(nil).Read), ctx)
}

// ReadWithTimeout mocks base method.
func (m *MockClienter) ReadWithTimeout(ctx context.Context, timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithTimeout", ctx, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithTimeout indicates an expected call of ReadWithTimeout.
func (mr *MockClienterMockRecorder) ReadWithTimeout(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithTimeout", reflect.TypeOf((*MockClienter)(nil).ReadWithTimeout), ctx, timeout)
}

// Write mocks base method.
func (m *MockClienter) Write(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockClienterMockRecorder) Write(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClienter)(nil).Write), msg)
}

// MockPoWer is a mock of PoWer interface.
type MockPoWer struct {
	ctrl     *gomock.Controller
	recorder *MockPoWerMockRecorder
}

// MockPoWerMockRecorder is the mock recorder for MockPoWer.
type MockPoWerMockRecorder struct {
	mock *MockPoWer
}

// NewMockPoWer creates a new mock instance.
func NewMockPoWer(ctrl *gomock.Controller) *MockPoWer {
	mock := &MockPoWer{ctrl: ctrl}
	mock.recorder = &MockPoWerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoWer) EXPECT() *MockPoWerMockRecorder {
	return m.recorder
}

// GetChallenge mocks base method.
func (m *MockPoWer) GetChallenge() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallenge")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChallenge indicates an expected call of GetChallenge.
func (mr *MockPoWerMockRecorder) GetChallenge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallenge", reflect.TypeOf((*MockPoWer)(nil).GetChallenge))
}

// IsValid mocks base method.
func (m *MockPoWer) IsValid(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockPoWerMockRecorder) IsValid(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockPoWer)(nil).IsValid), input)
}

// MockWisdomBooker is a mock of WisdomBooker interface.
type MockWisdomBooker struct {
	ctrl     *gomock.Controller
	recorder *MockWisdomBookerMockRecorder
}

// MockWisdomBookerMockRecorder is the mock recorder for MockWisdomBooker.
type MockWisdomBookerMockRecorder struct {
	mock *MockWisdomBooker
}

// NewMockWisdomBooker creates a new mock instance.
func NewMockWisdomBooker(ctrl *gomock.Controller) *MockWisdomBooker {
	mock := &MockWisdomBooker{ctrl: ctrl}
	mock.recorder = &MockWisdomBookerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWisdomBooker) EXPECT() *MockWisdomBookerMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockWisdomBooker) GetRandomQuote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockWisdomBookerMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockWisdomBooker)(nil).GetRandomQuote))
}
